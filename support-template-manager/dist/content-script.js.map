{"version":3,"file":"content-script.js","mappings":";;;;;AAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,eAAe;AACvE,yDAAyD,eAAe;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,eAAe;AAC3E,6DAA6D,eAAe;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,eAAe;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,eAAe;AAC5E,8DAA8D,eAAe;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,eAAe;AAC5E,8DAA8D,eAAe;AAC7E;AACA;AACA","sources":["webpack://support-template-manager/./src/content-script.ts"],"sourcesContent":["\"use strict\";\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === 'INSERT_TEMPLATE') {\n        insertTemplateContent(request.content, request.isRichText || false);\n        sendResponse({ success: true });\n        return true;\n    }\n});\n/**\n * Insert template content into the active email composer\n */\nfunction insertTemplateContent(content, isRichText) {\n    // Detect which email platform we're on\n    if (window.location.href.includes('gmail')) {\n        insertIntoGmail(content, isRichText);\n    }\n    else if (window.location.href.includes('outlook')) {\n        insertIntoOutlook(content, isRichText);\n    }\n    else {\n        // Generic fallback - try to insert into any focused editable element\n        insertIntoFocusedElement(content, isRichText);\n    }\n}\n/**\n * Insert content into Gmail composer\n */\nfunction insertIntoGmail(content, isRichText) {\n    // Find the active Gmail composer\n    const composerBody = document.querySelector('[role=\"textbox\"][aria-label*=\"Body\"]');\n    if (composerBody) {\n        // Gmail uses contentEditable divs\n        if (isRichText) {\n            // For rich text content, insert directly as HTML\n            composerBody.innerHTML = content;\n        }\n        else {\n            // For plain text, replace newlines with <br> elements for proper formatting\n            composerBody.innerHTML = content.replace(/\\n/g, '<br>');\n        }\n        // Dispatch input event to ensure Gmail registers the change\n        composerBody.dispatchEvent(new Event('input', { bubbles: true }));\n        composerBody.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n}\n/**\n * Insert content into Outlook composer\n */\nfunction insertIntoOutlook(content, isRichText) {\n    // Find the active Outlook composer\n    const composerBody = document.querySelector('[aria-label*=\"Message body\"]');\n    if (composerBody) {\n        if (composerBody.hasAttribute('contenteditable')) {\n            // Outlook often uses contentEditable divs\n            if (isRichText) {\n                composerBody.innerHTML = content;\n            }\n            else {\n                composerBody.innerHTML = content.replace(/\\n/g, '<br>');\n            }\n            // Make sure Outlook registers the change\n            composerBody.dispatchEvent(new Event('input', { bubbles: true }));\n            composerBody.dispatchEvent(new Event('change', { bubbles: true }));\n        }\n        else {\n            // Sometimes Outlook uses iframes\n            const iframe = composerBody.querySelector('iframe');\n            if (iframe && iframe.contentDocument) {\n                if (isRichText) {\n                    iframe.contentDocument.body.innerHTML = content;\n                }\n                else {\n                    iframe.contentDocument.body.innerHTML = content.replace(/\\n/g, '<br>');\n                }\n                // Try to dispatch events on the iframe document body\n                iframe.contentDocument.body.dispatchEvent(new Event('input', { bubbles: true }));\n            }\n        }\n    }\n}\n/**\n * Generic fallback - insert into any focused editable element\n */\nfunction insertIntoFocusedElement(content, isRichText) {\n    const activeElement = document.activeElement;\n    if (activeElement) {\n        if (activeElement instanceof HTMLInputElement ||\n            activeElement instanceof HTMLTextAreaElement) {\n            // For regular input elements, we can only insert plain text\n            // Strip HTML if this is rich text content\n            if (isRichText) {\n                const tempDiv = document.createElement('div');\n                tempDiv.innerHTML = content;\n                activeElement.value = tempDiv.textContent || tempDiv.innerText || '';\n            }\n            else {\n                activeElement.value = content;\n            }\n            activeElement.dispatchEvent(new Event('input', { bubbles: true }));\n            activeElement.dispatchEvent(new Event('change', { bubbles: true }));\n        }\n        else if (activeElement.isContentEditable) {\n            // For contentEditable elements, we can insert HTML\n            if (isRichText) {\n                activeElement.innerHTML = content;\n            }\n            else {\n                activeElement.innerHTML = content.replace(/\\n/g, '<br>');\n            }\n            activeElement.dispatchEvent(new Event('input', { bubbles: true }));\n            activeElement.dispatchEvent(new Event('change', { bubbles: true }));\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}