{"version":3,"file":"content-script.js","mappings":";;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,eAAe;AACvE,yDAAyD,eAAe;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,eAAe;AAC3E,6DAA6D,eAAe;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,eAAe;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,eAAe;AAC5E,8DAA8D,eAAe;AAC7E;AACA;AACA;AACA;AACA,6DAA6D,eAAe;AAC5E,8DAA8D,eAAe;AAC7E;AACA;AACA","sources":["webpack://support-template-manager/./src/content-script.ts"],"sourcesContent":["\"use strict\";\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === 'INSERT_TEMPLATE') {\n        // Always insert as rich text\n        insertTemplateContent(request.content);\n        sendResponse({ success: true });\n        return true;\n    }\n});\n/**\n * Insert template content into the active email composer\n * Always treats content as rich text HTML\n */\nfunction insertTemplateContent(content) {\n    // Detect which email platform we're on\n    if (window.location.href.includes('gmail')) {\n        insertIntoGmail(content);\n    }\n    else if (window.location.href.includes('outlook')) {\n        insertIntoOutlook(content);\n    }\n    else {\n        // Generic fallback - try to insert into any focused editable element\n        insertIntoFocusedElement(content);\n    }\n}\n/**\n * Insert content into Gmail composer\n */\nfunction insertIntoGmail(content) {\n    // Find the active Gmail composer\n    const composerBody = document.querySelector('[role=\"textbox\"][aria-label*=\"Body\"]');\n    if (composerBody) {\n        // Gmail uses contentEditable divs\n        composerBody.innerHTML = content;\n        // Dispatch input event to ensure Gmail registers the change\n        composerBody.dispatchEvent(new Event('input', { bubbles: true }));\n        composerBody.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    else {\n        // If composer not found immediately, set up a MutationObserver to detect when it appears\n        setupComposerObserver('gmail');\n    }\n}\n/**\n * Insert content into Outlook composer\n */\nfunction insertIntoOutlook(content) {\n    // Find the active Outlook composer\n    const composerBody = document.querySelector('[aria-label*=\"Message body\"]');\n    if (composerBody) {\n        if (composerBody.hasAttribute('contenteditable')) {\n            // Outlook often uses contentEditable divs\n            composerBody.innerHTML = content;\n            // Make sure Outlook registers the change\n            composerBody.dispatchEvent(new Event('input', { bubbles: true }));\n            composerBody.dispatchEvent(new Event('change', { bubbles: true }));\n        }\n        else {\n            // Sometimes Outlook uses iframes\n            const iframe = composerBody.querySelector('iframe');\n            if (iframe && iframe.contentDocument) {\n                iframe.contentDocument.body.innerHTML = content;\n                // Try to dispatch events on the iframe document body\n                iframe.contentDocument.body.dispatchEvent(new Event('input', { bubbles: true }));\n            }\n        }\n    }\n    else {\n        // If composer not found immediately, set up a MutationObserver to detect when it appears\n        setupComposerObserver('outlook');\n    }\n}\n/**\n * Setup a MutationObserver to detect when a composer is added to the DOM\n * This replaces the deprecated DOMNodeInserted event\n */\nfunction setupComposerObserver(platform) {\n    // Content to insert when composer is found\n    const pendingContent = window.localStorage.getItem('pending_template_content');\n    if (!pendingContent)\n        return;\n    // Create a MutationObserver to watch for changes to the DOM\n    const observer = new MutationObserver((mutations) => {\n        let composerFound = false;\n        if (platform === 'gmail') {\n            const composerBody = document.querySelector('[role=\"textbox\"][aria-label*=\"Body\"]');\n            if (composerBody) {\n                composerFound = true;\n                insertIntoGmail(pendingContent);\n            }\n        }\n        else if (platform === 'outlook') {\n            const composerBody = document.querySelector('[aria-label*=\"Message body\"]');\n            if (composerBody) {\n                composerFound = true;\n                insertIntoOutlook(pendingContent);\n            }\n        }\n        // If composer is found, disconnect the observer and clear pending content\n        if (composerFound) {\n            observer.disconnect();\n            window.localStorage.removeItem('pending_template_content');\n        }\n    });\n    // Start observing the document body for added nodes\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n    // Set a timeout to stop the observer after 10 seconds\n    setTimeout(() => {\n        observer.disconnect();\n        window.localStorage.removeItem('pending_template_content');\n    }, 10000);\n}\n/**\n * Generic fallback - insert into any focused editable element\n */\nfunction insertIntoFocusedElement(content) {\n    const activeElement = document.activeElement;\n    if (activeElement) {\n        if (activeElement instanceof HTMLInputElement ||\n            activeElement instanceof HTMLTextAreaElement) {\n            // For regular input elements, we must convert HTML to plain text\n            const tempDiv = document.createElement('div');\n            tempDiv.innerHTML = content;\n            activeElement.value = tempDiv.textContent || tempDiv.innerText || '';\n            activeElement.dispatchEvent(new Event('input', { bubbles: true }));\n            activeElement.dispatchEvent(new Event('change', { bubbles: true }));\n        }\n        else if (activeElement.isContentEditable) {\n            // For contentEditable elements, we can insert HTML\n            activeElement.innerHTML = content;\n            activeElement.dispatchEvent(new Event('input', { bubbles: true }));\n            activeElement.dispatchEvent(new Event('change', { bubbles: true }));\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}